{"title":"Java 面试题记录","uid":"bad0988fe1e449dbb6a39d8bce9e4907","slug":"Java-面试题记录","date":"2023-10-16T15:05:56.000Z","updated":"2023-10-16T15:35:34.662Z","comments":true,"path":"api/articles/Java-面试题记录.json","keywords":null,"cover":null,"content":"<h2 id=\"Java-基础\"><a href=\"#Java-基础\" class=\"headerlink\" title=\"Java 基础\"></a>Java 基础</h2><h3 id=\"String、StringBuffer-和-StringBuilder-的区别\"><a href=\"#String、StringBuffer-和-StringBuilder-的区别\" class=\"headerlink\" title=\"String、StringBuffer 和 StringBuilder 的区别\"></a>String、StringBuffer 和 StringBuilder 的区别</h3><p>String是只读字符串，它并不是基本数据类型，而是一个对象。从底层源码来看是一个final类型的字符数组，所引用的字符串不能被改变，一经定义，无法再增删改。</p>\n<p>StringBuffer和StringBuilder他们两都继承了AbstractStringBuilder抽象类，他们的底层都是可变的字符数组，所以在进行频繁的字符串操作时，建议使用StringBuffer和 StringBuilder来进行操作。 另外StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p>\n<hr>\n<h3 id=\"HashMap-与-ConcurrentHashMap-的异同\"><a href=\"#HashMap-与-ConcurrentHashMap-的异同\" class=\"headerlink\" title=\"HashMap 与 ConcurrentHashMap 的异同\"></a>HashMap 与 ConcurrentHashMap 的异同</h3><ol>\n<li>都是 key-value 形式的存储数据；</li>\n<li>HashMap 是线程不安全的，ConcurrentHashMap 是 JUC 下的线程安全的；</li>\n<li>HashMap 底层数据结构是数组 + 链表（JDK 1.8 之前）。JDK 1.8 之后是数组 + 链表 + 红黑 树。当链表中元素个数达到 8 的时候，链表的查询速度不如红黑树快，链表会转为红黑树，红 黑树查询速度快；</li>\n<li>HashMap 初始数组大小为 16（默认），当出现扩容的时候，以 0.75 * 数组大小的方式进行扩 容；</li>\n<li>ConcurrentHashMap 在 JDK 1.8 之前是采用分段锁来现实的 Segment + HashEntry， Segment 数组大小默认是 16，2 的 n 次方；JDK 1.8 之后，采用 Node + CAS + Synchronized来保证并发安全进行实现。</li>\n</ol>\n<hr>\n<h3 id=\"ArrayList源码分析\"><a href=\"#ArrayList源码分析\" class=\"headerlink\" title=\"ArrayList源码分析\"></a>ArrayList源码分析</h3><p>当实例化ArrayList对象不指定容量时，默认初始容量为10。</p>\n<p><strong>boolean add(E e)源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">E</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #82AAFF\">ensureCapacityInternal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">size </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">// Increments modCount!!</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     elementData</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">size</span><span style=\"color: #89DDFF\">++]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>添加元素先判断容量是否足够，当元素数量大于数组容量时进行1.5倍扩容、数组拷贝。</p>\n<p><strong>E get(int index)源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">E</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #82AAFF\">rangeCheck</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">elementData</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>查询获取元素时先检查下标是否越界，然后直接根据下标获取元素。</p>\n<p><strong>E set(int index, E element)源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">E</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">E</span><span style=\"color: #BABED8\"> element</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #82AAFF\">rangeCheck</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #C792EA\">E</span><span style=\"color: #BABED8\"> oldValue </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">elementData</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     elementData</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">index</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> element</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> oldValue</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>先检查下标是否越界，更改指定下标的数据，并把旧数据返回。</p>\n<p><strong>void add(int index, E element)源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">E</span><span style=\"color: #BABED8\"> element</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #82AAFF\">rangeCheckForAdd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #82AAFF\">ensureCapacityInternal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">size </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">// Increments modCount!!</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">arraycopy</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">elementData</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> elementData</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> index </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                      size </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     elementData</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">index</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> element</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     size</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>先检查下标是否越界，再判断容量是否足够，在指定位置插入指定的元素并将当前位于该位置及以后的元素向后移动。</p>\n<p><strong>E remove(int index)源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">E</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">remove</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #82AAFF\">rangeCheck</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     modCount</span><span style=\"color: #89DDFF\">++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #C792EA\">E</span><span style=\"color: #BABED8\"> oldValue </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">elementData</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">index</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> numMoved </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> size </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> index </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">numMoved </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">         System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">arraycopy</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">elementData</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> elementData</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> index</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                          numMoved</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     elementData</span><span style=\"color: #89DDFF\">[--</span><span style=\"color: #BABED8\">size</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// clear to let GC do its work</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> oldValue</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>先检查下标是否越界，删除此列表中指定位置的元素，将任何后续元素向前移动，并把删除的数据返回。</p>\n<p><strong>void grow(int minCapacity)源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">grow</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> minCapacity</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// overflow-conscious code</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> oldCapacity </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> elementData</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> newCapacity </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> oldCapacity </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">oldCapacity </span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">newCapacity </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> minCapacity </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        newCapacity </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> minCapacity</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">newCapacity </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> MAX_ARRAY_SIZE </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        newCapacity </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">hugeCapacity</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">minCapacity</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// minCapacity is usually close to size, so this is a win:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    elementData </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Arrays</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">copyOf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">elementData</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> newCapacity</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>以当前容量的1.5倍增加容量，以确保它至少可以容纳最小容量参数指定的元素数量。</p>\n<hr>\n<h3 id=\"ArrayList优缺点及使用场景\"><a href=\"#ArrayList优缺点及使用场景\" class=\"headerlink\" title=\"ArrayList优缺点及使用场景\"></a>ArrayList优缺点及使用场景</h3><p>优点：基于数组来实现，非常适合随机读。</p>\n<p>缺点：</p>\n<ol>\n<li>原理就是底层基于数组来实现，java里面数组都是定长数组，长度是固定的。当加入数据达到一定程度后，会进行数组扩容 ，就会搞一个更大的数组，把以前的数组元素拷贝到新的数组里面去。</li>\n<li>往ArrayList中间插入一个元素，性能比较差，会导致后面的大量的元素挪动一个位置。</li>\n</ol>\n<p>使用场景：有一批数据，查询出来，灌入ArrayList中，后面不会频繁插入元素了，主要就是遍历这个集合，或者是通过索引随机读取某个元素，这种使用ArrayList还是比较合适的。</p>\n<hr>\n<h3 id=\"LinkedList优缺点及使用场景\"><a href=\"#LinkedList优缺点及使用场景\" class=\"headerlink\" title=\"LinkedList优缺点及使用场景\"></a>LinkedList优缺点及使用场景</h3><p>LinkedList底层是基于双向链表来实现的，一个节点连着另外一个节点。</p>\n<p>优点：就是非常适合各种元素频繁的插入里面去。</p>\n<p>缺点：不太适合在随机的位置，获取某个随机的位置的元素。</p>\n<p>使用场景：适合频繁插入和删除某个元素，LinkedList其实是可以当做队列来用的。如果要在内存里实现一个基本的队列的话，可以用LinkedList。</p>\n<hr>\n<h3 id=\"HashMap源码分析\"><a href=\"#HashMap源码分析\" class=\"headerlink\" title=\"HashMap源码分析\"></a>HashMap源码分析</h3><p><strong>HashMap的静态常量</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * 默认的初始容量-必须是二的幂</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> DEFAULT_INITIAL_CAPACITY </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// aka 16</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * 最大容量，如果其中一个带有参数的构造函数隐式指定了更高的值，则使用该容量。必须是二次方&lt;= 1&lt;&lt;30</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> MAXIMUM_CAPACITY </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">30</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * 在构造函数中未指定时使用的负载系数</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">float</span><span style=\"color: #BABED8\"> DEFAULT_LOAD_FACTOR </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0.75f</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * 使用树而不是链表作为存储的计数阈值。当向至少有这么多节点的链表添加元素时，链表会转换为树。</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> TREEIFY_THRESHOLD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * 在调整大小操作期间，用于红黑树转链表的最小计数阈值。应小于TREEIFY_THRESHOLD，并且最多为6，以便在移除时进行收缩检测。</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> UNTREEIFY_THRESHOLD </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">6</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> * 可以树化的最小table数组容量。（否则，如果一个链表中的节点太多，则会调整表的大小。）</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> MIN_TREEIFY_CAPACITY </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">64</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p><strong>HashMap的构造方法源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">HashMap</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> initialCapacity</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">float</span><span style=\"color: #BABED8\"> loadFactor</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">initialCapacity </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">IllegalArgumentException</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Illegal initial capacity: </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                                           initialCapacity</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">initialCapacity </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> MAXIMUM_CAPACITY</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        initialCapacity </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> MAXIMUM_CAPACITY</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">loadFactor </span><span style=\"color: #89DDFF\">&lt;=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> Float</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isNaN</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">loadFactor</span><span style=\"color: #89DDFF\">))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">IllegalArgumentException</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Illegal load factor: </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                                           loadFactor</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">loadFactor </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> loadFactor</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">threshold </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">tableSizeFor</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">initialCapacity</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">HashMap</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> initialCapacity</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">this(</span><span style=\"color: #BABED8\">initialCapacity</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> DEFAULT_LOAD_FACTOR</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">HashMap</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">loadFactor </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> DEFAULT_LOAD_FACTOR</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// all other fields defaulted</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong>HashMap的hash(Object key)方法源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">hash</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> h</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">?</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">h </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">hashCode</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">^</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">h </span><span style=\"color: #89DDFF\">&gt;&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">16</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>计算key的hashCode()与自身无符号右移16位，然后异或计算得到的值。通过移位异或，将高16位的影响扩散到低16位，增加随机性，来减少发生哈希冲突的几率。</p>\n<p><strong>HashMap的get(Object key)及getNode(int hash, Object key)方法源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">V</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">K</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C792EA\">V</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">e </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #82AAFF\">hash</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">),</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">?</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">:</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">K</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">V</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> hash</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">K</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C792EA\">V</span><span style=\"color: #89DDFF\">&gt;[]</span><span style=\"color: #BABED8\"> tab</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">K</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C792EA\">V</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> first</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> n</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">K</span><span style=\"color: #BABED8\"> k</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">tab </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> table</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">n </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tab</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">first </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tab</span><span style=\"color: #89DDFF\">[(</span><span style=\"color: #BABED8\">n </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #BABED8\"> hash</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">first</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">hash </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> hash </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// always check first node</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">k </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> first</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> key </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">equals</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">k</span><span style=\"color: #89DDFF\">))))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> first</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">e </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> first</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">first </span><span style=\"color: #89DDFF\">instanceof</span><span style=\"color: #BABED8\"> TreeNode</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">K</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">V</span><span style=\"color: #89DDFF\">&gt;)</span><span style=\"color: #BABED8\">first</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">getTreeNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">hash</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">do</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">hash </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> hash </span><span style=\"color: #89DDFF\">&amp;&amp;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">k </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> key </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">equals</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">k</span><span style=\"color: #89DDFF\">))))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">e </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>getNode(int hash, Object key)：根据hash寻址找到指定key在table数组的位置上的node，判断这个node是不是这个key，如果是直接返回这个节点。不是的话，先判断next节点是不是TreeNode节点，如果是则进行红黑树相关的查找。如果也不是TreeNode节点，则进行链表的遍历查找。</p>\n<p><strong>HashMap的put(K key, V value)及putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)方法源码</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">V</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">put</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">K</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">V</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">putVal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #82AAFF\">hash</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">),</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">final</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">V</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">putVal</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> hash</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">K</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">V</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> onlyIfAbsent</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">               </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> evict</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">K</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C792EA\">V</span><span style=\"color: #89DDFF\">&gt;[]</span><span style=\"color: #BABED8\"> tab</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">K</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C792EA\">V</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> p</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> n</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">tab </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> table</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">n </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tab</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">length</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        n </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">tab </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">resize</span><span style=\"color: #89DDFF\">()).</span><span style=\"color: #BABED8\">length</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">p </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> tab</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">n </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #BABED8\"> hash</span><span style=\"color: #89DDFF\">])</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        tab</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">newNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">hash</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Node</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">K</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C792EA\">V</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">K</span><span style=\"color: #BABED8\"> k</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">p</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">hash </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> hash </span><span style=\"color: #89DDFF\">&amp;&amp;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">k </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> p</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> key </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">equals</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">k</span><span style=\"color: #89DDFF\">))))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            e </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> p</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">p </span><span style=\"color: #89DDFF\">instanceof</span><span style=\"color: #BABED8\"> TreeNode</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            e </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #C792EA\">TreeNode</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">K</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">V</span><span style=\"color: #89DDFF\">&gt;)</span><span style=\"color: #BABED8\">p</span><span style=\"color: #89DDFF\">).</span><span style=\"color: #82AAFF\">putTreeVal</span><span style=\"color: #89DDFF\">(this,</span><span style=\"color: #BABED8\"> tab</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> hash</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> binCount </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">binCount</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">e </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> p</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    p</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">next </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">newNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">hash</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">binCount </span><span style=\"color: #89DDFF\">&gt;=</span><span style=\"color: #BABED8\"> TREEIFY_THRESHOLD </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// -1 for 1st</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                        </span><span style=\"color: #82AAFF\">treeifyBin</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">tab</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> hash</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">hash </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> hash </span><span style=\"color: #89DDFF\">&amp;&amp;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF\">((</span><span style=\"color: #BABED8\">k </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> key </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">key </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> key</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">equals</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">k</span><span style=\"color: #89DDFF\">))))</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                p </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">e </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// existing mapping for key</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">V</span><span style=\"color: #BABED8\"> oldValue </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">onlyIfAbsent </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> oldValue </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">value </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #82AAFF\">afterNodeAccess</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">e</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> oldValue</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">modCount</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(++</span><span style=\"color: #BABED8\">size </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> threshold</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #82AAFF\">resize</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">afterNodeInsertion</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">evict</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>如果当前对象是不是刚被创建，则进行table数组、阈值相关的初始化。然后根据hash寻址算法计算出在table数组的下标，判断当前位置是否有数据。如果没有数据的话，直接把数据放在当前位置。如果已经存在数据，则判断是不是当前key，是的话就更新value值。不是的话判断当前节点是不是TreeNode节点，是的话进行红黑树相关的操作。如果不是TreeNode节点，就进行链表的处理。循环链表，如果可以在链表找到key相等的节点则更新，否则就在链表最后添加新的节点。如果链表长度超过8，则链表转化为红黑树。</p>\n<hr>\n","text":"Java 基础String、StringBuffer 和 StringBuilder 的区别String是只读字符串，它并不是基本数据类型，而是一个对象。从底层...","permalink":"/post/Java-面试题记录","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Java 面试","slug":"Java-面试","count":1,"path":"api/tags/Java-面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Java 基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#String%E3%80%81StringBuffer-%E5%92%8C-StringBuilder-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">String、StringBuffer 和 StringBuilder 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashMap-%E4%B8%8E-ConcurrentHashMap-%E7%9A%84%E5%BC%82%E5%90%8C\"><span class=\"toc-text\">HashMap 与 ConcurrentHashMap 的异同</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">ArrayList源码分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ArrayList%E4%BC%98%E7%BC%BA%E7%82%B9%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">ArrayList优缺点及使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LinkedList%E4%BC%98%E7%BC%BA%E7%82%B9%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">LinkedList优缺点及使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">HashMap源码分析</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Nginx 学习记录","uid":"217593595b5cc111881f13eb6a828c9a","slug":"Nginx-学习记录","date":"2023-10-16T14:50:22.000Z","updated":"2023-10-16T14:59:03.548Z","comments":true,"path":"api/articles/Nginx-学习记录.json","keywords":null,"cover":null,"text":"安装 下载 wget https://nginx.org/download/nginx-1.24.0.tar.gz 解压安装 tar -zxvf nginx-1...","permalink":"/post/Nginx-学习记录","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}